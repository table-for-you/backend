package com.project.tableforyou.domain.restaurant.controller;import com.project.tableforyou.domain.reservation.service.QueueReservationService;import com.project.tableforyou.domain.restaurant.api.PublicRestaurantApi;import com.project.tableforyou.domain.restaurant.service.RestaurantService;import com.project.tableforyou.common.handler.exceptionHandler.error.ErrorCode;import com.project.tableforyou.common.handler.exceptionHandler.exception.CustomException;import com.project.tableforyou.common.utils.api.ApiUtil;import lombok.RequiredArgsConstructor;import org.springframework.data.domain.PageRequest;import org.springframework.data.domain.Pageable;import org.springframework.data.domain.Sort;import org.springframework.data.web.PageableDefault;import org.springframework.http.ResponseEntity;import org.springframework.web.bind.annotation.GetMapping;import org.springframework.web.bind.annotation.PathVariable;import org.springframework.web.bind.annotation.RequestMapping;import org.springframework.web.bind.annotation.RequestParam;import org.springframework.web.bind.annotation.RestController;@RestController@RequestMapping("/public/restaurants")@RequiredArgsConstructorpublic class PublicRestaurantController implements PublicRestaurantApi {    private final RestaurantService restaurantService;    private final QueueReservationService queueReservationService;    /* 가게 불러오기 */    @Override    @GetMapping("/{restaurantId}")    public ResponseEntity<?> readRestaurant(@PathVariable(name = "restaurantId") Long restaurantId) {        return ResponseEntity.ok(restaurantService.readRestaurant(restaurantId));    }    /* 가게 좌석 불러옥; */    @Override    @GetMapping("/{restaurantId}/used-seats")    public ResponseEntity<?> readRestaurantUsedSeats(@PathVariable(name = "restaurantId") Long restaurantId) {        return ResponseEntity.ok(ApiUtil.from(restaurantService.readRestaurantUsedSeats(restaurantId)));    }    /* 전체 가게 불러오기. 페이징 처리 + 검색 기능 */    @Override    @GetMapping    public ResponseEntity<?> readAllRestaurant(            @PageableDefault(size = 20, sort = "rating", direction = Sort.Direction.DESC) Pageable pageable,            @RequestParam(required = false, value = "type") String type,            @RequestParam(required = false, value = "search-keyword") String searchKeyword,            @RequestParam(required = false, value = "sort-by", defaultValue = "rating") String sortBy,            @RequestParam(required = false, value = "direction", defaultValue = "DESC") String direction) {        // rating가 아닌 다른 정렬 방식 선택        Sort sort = Sort.by(Sort.Direction.fromString(direction), sortBy);        Pageable sortedPageable = PageRequest.of(pageable.getPageNumber(), pageable.getPageSize(), sort);        if (type == null) {            return ResponseEntity.ok(restaurantService.readAllRestaurant(sortedPageable));        }        return switch (type) {            case "restaurant" -> ResponseEntity.ok(restaurantService.restaurantPageSearchList(searchKeyword, sortedPageable));            case "region" -> ResponseEntity.ok(restaurantService.readAllRestaurantByRegion(searchKeyword, sortedPageable));            case "location" -> ResponseEntity.ok(restaurantService.readAllRestaurantByLocation(searchKeyword, sortedPageable));            case "food" -> ResponseEntity.ok(restaurantService.readAllRestaurantByFoodType(searchKeyword, sortedPageable));            default -> throw new CustomException(ErrorCode.INVALID_PARAMETER);        };    }    /* 가게 예약자 수 불러오기 */    @Override    @GetMapping("/{restaurantId}/waiting")    public ResponseEntity<?> waiting(@PathVariable(name = "restaurantId") Long restaurantId) {        return ResponseEntity.ok(ApiUtil.from(queueReservationService.getQueueWaitingCount(restaurantId)));    }}